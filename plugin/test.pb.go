// Code generated by protoc-gen-go-plugin. DO NOT EDIT.
// versions:
// 	protoc-gen-go-plugin v0.1.0
// 	protoc               v3.21.9
// source: test.proto

package plugin

import (
	context "context"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PassDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries  uint64            `protobuf:"varint,1,opt,name=entries,proto3" json:"entries,omitempty"`
	Sequence uint64            `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Data     map[string]*State `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PassDataRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *PassDataRequest) GetEntries() uint64 {
	if x != nil {
		return x.Entries
	}
	return 0
}

func (x *PassDataRequest) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PassDataRequest) GetData() map[string]*State {
	if x != nil {
		return x.Data
	}
	return nil
}

type PassDataReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]*State `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PassDataReply) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *PassDataReply) GetData() map[string]*State {
	if x != nil {
		return x.Data
	}
	return nil
}

type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldA string `protobuf:"bytes,1,opt,name=field_a,json=fieldA,proto3" json:"field_a,omitempty"`
	FieldB string `protobuf:"bytes,2,opt,name=field_b,json=fieldB,proto3" json:"field_b,omitempty"`
	FieldC string `protobuf:"bytes,3,opt,name=field_c,json=fieldC,proto3" json:"field_c,omitempty"`
	FieldD string `protobuf:"bytes,4,opt,name=field_d,json=fieldD,proto3" json:"field_d,omitempty"`
	FieldE string `protobuf:"bytes,5,opt,name=field_e,json=fieldE,proto3" json:"field_e,omitempty"`
	FieldF string `protobuf:"bytes,6,opt,name=field_f,json=fieldF,proto3" json:"field_f,omitempty"`
	FieldG string `protobuf:"bytes,7,opt,name=field_g,json=fieldG,proto3" json:"field_g,omitempty"`
	FieldH string `protobuf:"bytes,8,opt,name=field_h,json=fieldH,proto3" json:"field_h,omitempty"`
	FieldI string `protobuf:"bytes,9,opt,name=field_i,json=fieldI,proto3" json:"field_i,omitempty"`
	FieldJ string `protobuf:"bytes,10,opt,name=field_j,json=fieldJ,proto3" json:"field_j,omitempty"`
	FieldK string `protobuf:"bytes,11,opt,name=field_k,json=fieldK,proto3" json:"field_k,omitempty"`
	FieldL string `protobuf:"bytes,12,opt,name=field_l,json=fieldL,proto3" json:"field_l,omitempty"`
	FieldM string `protobuf:"bytes,13,opt,name=field_m,json=fieldM,proto3" json:"field_m,omitempty"`
	FieldN string `protobuf:"bytes,14,opt,name=field_n,json=fieldN,proto3" json:"field_n,omitempty"`
}

func (x *State) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *State) GetFieldA() string {
	if x != nil {
		return x.FieldA
	}
	return ""
}

func (x *State) GetFieldB() string {
	if x != nil {
		return x.FieldB
	}
	return ""
}

func (x *State) GetFieldC() string {
	if x != nil {
		return x.FieldC
	}
	return ""
}

func (x *State) GetFieldD() string {
	if x != nil {
		return x.FieldD
	}
	return ""
}

func (x *State) GetFieldE() string {
	if x != nil {
		return x.FieldE
	}
	return ""
}

func (x *State) GetFieldF() string {
	if x != nil {
		return x.FieldF
	}
	return ""
}

func (x *State) GetFieldG() string {
	if x != nil {
		return x.FieldG
	}
	return ""
}

func (x *State) GetFieldH() string {
	if x != nil {
		return x.FieldH
	}
	return ""
}

func (x *State) GetFieldI() string {
	if x != nil {
		return x.FieldI
	}
	return ""
}

func (x *State) GetFieldJ() string {
	if x != nil {
		return x.FieldJ
	}
	return ""
}

func (x *State) GetFieldK() string {
	if x != nil {
		return x.FieldK
	}
	return ""
}

func (x *State) GetFieldL() string {
	if x != nil {
		return x.FieldL
	}
	return ""
}

func (x *State) GetFieldM() string {
	if x != nil {
		return x.FieldM
	}
	return ""
}

func (x *State) GetFieldN() string {
	if x != nil {
		return x.FieldN
	}
	return ""
}

// go:plugin type=plugin version=1
type DataPasser interface {
	PassData(context.Context, PassDataRequest) (PassDataReply, error)
	PassDataError(context.Context, PassDataRequest) (PassDataReply, error)
}
